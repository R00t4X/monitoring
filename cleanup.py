#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
"""

import os
import shutil
import glob
import sys

def print_step(message):
    print(f"üßπ {message}")

def print_success(message):
    print(f"‚úÖ {message}")

def print_warning(message):
    print(f"‚ö†Ô∏è  {message}")

def print_error(message):
    print(f"‚ùå {message}")

class ProjectCleaner:
    def __init__(self):
        self.script_dir = os.path.dirname(os.path.abspath(__file__))
        self.removed_files = []
        self.removed_dirs = []
        
    def clean_python_cache(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ Python –∫–µ—à–∞"""
        print_step("–£–¥–∞–ª–µ–Ω–∏–µ Python –∫–µ—à–∞...")
        
        # –ü–æ–∏—Å–∫ __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for root, dirs, files in os.walk(self.script_dir):
            for dir_name in dirs[:]:
                if dir_name == '__pycache__':
                    cache_path = os.path.join(root, dir_name)
                    try:
                        shutil.rmtree(cache_path)
                        self.removed_dirs.append(cache_path)
                        dirs.remove(dir_name)
                    except Exception as e:
                        print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {cache_path}: {e}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ .pyc —Ñ–∞–π–ª–æ–≤
        pyc_files = glob.glob(os.path.join(self.script_dir, "**/*.pyc"), recursive=True)
        for file_path in pyc_files:
            try:
                os.remove(file_path)
                self.removed_files.append(file_path)
            except Exception as e:
                print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
    
    def clean_virtual_environments(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π"""
        print_step("–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π...")
        
        venv_names = ['monitoring_venv', 'venv', 'env', '.venv']
        
        for venv_name in venv_names:
            venv_path = os.path.join(self.script_dir, venv_name)
            if os.path.exists(venv_path):
                try:
                    shutil.rmtree(venv_path)
                    self.removed_dirs.append(venv_path)
                    print_success(f"–£–¥–∞–ª–µ–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {venv_name}")
                except Exception as e:
                    print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {venv_path}: {e}")
    
    def clean_logs(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        print_step("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤...")
        
        log_patterns = ['*.log', 'logs/*', 'log/*']
        
        for pattern in log_patterns:
            files = glob.glob(os.path.join(self.script_dir, pattern), recursive=True)
            for file_path in files:
                try:
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                        self.removed_files.append(file_path)
                    elif os.path.isdir(file_path):
                        shutil.rmtree(file_path)
                        self.removed_dirs.append(file_path)
                except Exception as e:
                    print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
    
    def clean_temp_files(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print_step("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        temp_patterns = ['*.tmp', '*.temp', '*~', '.DS_Store', 'Thumbs.db']
        
        for pattern in temp_patterns:
            files = glob.glob(os.path.join(self.script_dir, "**/" + pattern), recursive=True)
            for file_path in files:
                try:
                    os.remove(file_path)
                    self.removed_files.append(file_path)
                except Exception as e:
                    print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
    
    def clean_databases(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        print_step("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
        
        db_patterns = ['*.db', '*.sqlite', '*.sqlite3']
        
        for pattern in db_patterns:
            files = glob.glob(os.path.join(self.script_dir, "**/" + pattern), recursive=True)
            for file_path in files:
                try:
                    os.remove(file_path)
                    self.removed_files.append(file_path)
                    print_success(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –ë–î: {os.path.basename(file_path)}")
                except Exception as e:
                    print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
    
    def clean_backups(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        print_step("–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
        
        backup_patterns = ['backup_*.json', '*.backup', '*.bak']
        
        for pattern in backup_patterns:
            files = glob.glob(os.path.join(self.script_dir, pattern))
            for file_path in files:
                try:
                    os.remove(file_path)
                    self.removed_files.append(file_path)
                    print_success(f"–£–¥–∞–ª–µ–Ω –±—ç–∫–∞–ø: {os.path.basename(file_path)}")
                except Exception as e:
                    print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
    
    def clean_ide_files(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ IDE"""
        print_step("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ IDE...")
        
        ide_dirs = ['.vscode', '.idea', '.settings']
        ide_files = ['*.swp', '*.swo', '.project', '.pydevproject']
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π IDE
        for ide_dir in ide_dirs:
            dir_path = os.path.join(self.script_dir, ide_dir)
            if os.path.exists(dir_path):
                try:
                    shutil.rmtree(dir_path)
                    self.removed_dirs.append(dir_path)
                    print_success(f"–£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è IDE: {ide_dir}")
                except Exception as e:
                    print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {dir_path}: {e}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ IDE
        for pattern in ide_files:
            files = glob.glob(os.path.join(self.script_dir, "**/" + pattern), recursive=True)
            for file_path in files:
                try:
                    os.remove(file_path)
                    self.removed_files.append(file_path)
                except Exception as e:
                    print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
    
    def clean_sensitive_files(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print_step("–£–¥–∞–ª–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        sensitive_patterns = ['.env*', 'config.ini', 'secrets.json', 'credentials.json', '*.key', '*.pem']
        
        for pattern in sensitive_patterns:
            files = glob.glob(os.path.join(self.script_dir, pattern))
            for file_path in files:
                if not file_path.endswith('.example'):  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
                    try:
                        os.remove(file_path)
                        self.removed_files.append(file_path)
                        print_warning(f"–£–¥–∞–ª–µ–Ω —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(file_path)}")
                    except Exception as e:
                        print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
    
    def show_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\n" + "="*60)
        print("üìã –°–í–û–î–ö–ê –û–ß–ò–°–¢–ö–ò")
        print("="*60)
        
        print(f"üìÅ –£–¥–∞–ª–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(self.removed_dirs)}")
        for dir_path in self.removed_dirs:
            print(f"   - {os.path.relpath(dir_path, self.script_dir)}")
        
        print(f"\nüìÑ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.removed_files)}")
        for file_path in self.removed_files:
            print(f"   - {os.path.relpath(file_path, self.script_dir)}")
        
        if not self.removed_files and not self.removed_dirs:
            print_success("–ü—Ä–æ–µ–∫—Ç —É–∂–µ —á–∏—Å—Ç—ã–π! üßπ")
        else:
            print_success(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–æ –æ—Ç {len(self.removed_files + self.removed_dirs)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    def run_cleanup(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        print("üßπ –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê –î–õ–Ø GITHUB")
        print("="*40)
        
        cleanup_steps = [
            self.clean_python_cache,
            self.clean_virtual_environments,
            self.clean_logs,
            self.clean_temp_files,
            self.clean_databases,
            self.clean_backups,
            self.clean_ide_files,
            self.clean_sensitive_files
        ]
        
        for step in cleanup_steps:
            try:
                step()
            except Exception as e:
                print_error(f"–û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
        
        self.show_summary()

def main():
    cleaner = ProjectCleaner()
    
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ Git!")
    print("–§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    print("- Python –∫–µ—à (__pycache__/)")
    print("- –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("- –õ–æ–≥–∏ (*.log)")
    print("- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print("- –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("- –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
    print("- –§–∞–π–ª—ã IDE")
    print("- –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (.env, –∫–ª—é—á–∏)")
    
    try:
        choice = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower().strip()
        if choice in ['y', 'yes', '–¥–∞', '–¥']:
            cleaner.run_cleanup()
        else:
            print("üõë –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except KeyboardInterrupt:
        print("\nüõë –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    main()
