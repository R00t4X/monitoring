"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ simple_app.py
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ app.py —É—Å—Ç–∞—Ä–µ–ª–æ. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ simple_app.py")
print("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ simple_app.py...")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
try:
    from simple_app import app
    
    if __name__ == '__main__':
        app.run(host='127.0.0.1', port=5000, debug=True)
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üìã –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª simple_app.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    SQLAlchemy = None

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç system_monitor
try:
    from system_monitor import system_monitor
    SYSTEM_MONITOR_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: system_monitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")
    SYSTEM_MONITOR_AVAILABLE = False
    system_monitor = None

# Import advanced monitoring components
try:
    from advanced_monitor import advanced_monitor
    from alert_system import alert_manager, EmailNotifier, SlackNotifier
    if SQLALCHEMY_AVAILABLE:
        from models import db, Server, ServerMetric, Alert as DBAlert, MonitoringConfig
    ADVANCED_MONITORING_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Advanced monitoring components not available: {e}")
    ADVANCED_MONITORING_AVAILABLE = False
    # Create mock objects
    if SQLALCHEMY_AVAILABLE:
        class MockDB:
            def init_app(self, app): pass
            def create_all(self): pass
        db = MockDB()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('monitoring.log'),
        logging.StreamHandler()
    ]
)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ SQLAlchemy –¥–æ—Å—Ç—É–ø–Ω–∞)
if SQLALCHEMY_AVAILABLE:
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///monitoring.db')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
if SQLALCHEMY_AVAILABLE and 'db' in locals():
    db.init_app(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SocketIO (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
if SOCKETIO_AVAILABLE:
    socketio = SocketIO(app, cors_allowed_origins="*", async_mode='eventlet')
else:
    socketio = None

# –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config['DEBUG'] = os.environ.get('FLASK_DEBUG', 'False').lower() == 'true'

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CREDENTIALS = {
    'username': os.environ.get('ADMIN_USERNAME', 'admin'),
    'password': os.environ.get('ADMIN_PASSWORD', 'admin123')
}

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é –ë–î)
servers_data = [
    {
        'id': 1,
        'name': 'Web-—Å–µ—Ä–≤–µ—Ä 1',
        'ip': '192.168.1.10',
        'port': 80,
        'status': 'online',
        'cpu': 45,
        'memory': 67,
        'disk': 32,
        'network_in': 1250,
        'network_out': 890,
        'uptime': '15 –¥–Ω–µ–π 8 —á–∞—Å–æ–≤',
        'last_check': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'location': '–ú–æ—Å–∫–≤–∞, –†–§',
        'os': 'Ubuntu 22.04',
        'alerts': []
    },
    {
        'id': 2,
        'name': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
        'ip': '192.168.1.20',
        'port': 3306,
        'status': 'online',
        'cpu': 78,
        'memory': 89,
        'disk': 45,
        'network_in': 2340,
        'network_out': 1560,
        'uptime': '30 –¥–Ω–µ–π 12 —á–∞—Å–æ–≤',
        'last_check': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'location': '–°–ü–±, –†–§',
        'os': 'CentOS 8',
        'alerts': ['–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU', '–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏']
    },
    {
        'id': 3,
        'name': '–§–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä',
        'ip': '192.168.1.30',
        'port': 21,
        'status': 'warning',
        'cpu': 15,
        'memory': 45,
        'disk': 92,
        'network_in': 450,
        'network_out': 320,
        'uptime': '5 –¥–Ω–µ–π 3 —á–∞—Å–∞',
        'last_check': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'location': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –†–§',
        'os': 'Windows Server 2019',
        'alerts': ['–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ']
    },
    {
        'id': 4,
        'name': 'Backup —Å–µ—Ä–≤–µ—Ä',
        'ip': '192.168.1.40',
        'port': 22,
        'status': 'offline',
        'cpu': 0,
        'memory': 0,
        'disk': 0,
        'network_in': 0,
        'network_out': 0,
        'uptime': '0 –¥–Ω–µ–π 0 —á–∞—Å–æ–≤',
        'last_check': (datetime.now() - timedelta(hours=2)).strftime('%Y-%m-%d %H:%M:%S'),
        'location': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –†–§',
        'os': 'Debian 11',
        'alerts': ['–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω']
    }
]

# –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notifications = [
    {
        'id': 1,
        'type': 'warning',
        'message': '–§–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (92%)',
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'server_id': 3
    },
    {
        'id': 2,
        'type': 'error',
        'message': 'Backup —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —É–∂–µ 2 —á–∞—Å–∞',
        'timestamp': (datetime.now() - timedelta(hours=2)).strftime('%Y-%m-%d %H:%M:%S'),
        'server_id': 4
    }
]

def admin_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'admin_logged_in' not in session:
            flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error')
            return redirect(url_for('admin'))
        return f(*args, **kwargs)
    return decorated_function

def update_server_metrics():
    """–°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    for server in servers_data:
        if server['status'] == 'online':
            # –ù–µ–±–æ–ª—å—à–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            server['cpu'] = max(0, min(100, server['cpu'] + random.randint(-5, 5)))
            server['memory'] = max(0, min(100, server['memory'] + random.randint(-3, 3)))
            server['network_in'] = max(0, server['network_in'] + random.randint(-100, 200))
            server['network_out'] = max(0, server['network_out'] + random.randint(-50, 150))
            server['last_check'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ
def get_local_server_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ"""
    if not SYSTEM_MONITOR_AVAILABLE:
        return {
            'id': 0,
            'name': '–õ–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)',
            'ip': '127.0.0.1',
            'port': 5000,
            'status': 'online',
            'cpu': 0,
            'memory': 0,
            'disk': 0,
            'network_in': 0,
            'network_out': 0,
            'uptime': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'last_check': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'location': '–õ–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞',
            'os': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'alerts': ['–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω']
        }
    
    try:
        cpu_data = system_monitor.get_cpu_usage()
        memory_data = system_monitor.get_memory_usage()
        disk_data = system_monitor.get_disk_usage()
        network_data = system_monitor.get_network_usage()
        system_info = system_monitor.get_system_info()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–∫ (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
        main_disk = disk_data[0] if disk_data else {'percent': 0}
        
        return {
            'id': 0,
            'name': f'–õ–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ ({system_info.get("hostname", "Unknown")})',
            'ip': socket.gethostbyname(socket.gethostname()),
            'port': 5000,
            'status': 'online',
            'cpu': cpu_data.get('total', 0),
            'memory': memory_data.get('percent', 0),
            'disk': main_disk.get('percent', 0),
            'network_in': network_data.get('bytes_recv', 0),
            'network_out': network_data.get('bytes_sent', 0),
            'uptime': system_info.get('uptime', '0 –¥–Ω–µ–π 0 —á–∞—Å–æ–≤'),
            'last_check': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'location': '–õ–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞',
            'os': f"{system_info.get('platform', 'Unknown')} {system_info.get('platform_release', '')}",
            'alerts': []
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: {e}")
        return None

# –û–±–Ω–æ–≤–ª—è–µ–º servers_data —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É
def update_servers_list():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–æ–π"""
    global servers_data
    local_server = get_local_server_data()
    if local_server:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        servers_data = [s for s in servers_data if s['id'] != 0]
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ
        servers_data.insert(0, local_server)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/api/health')
def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    return jsonify({
        '—Å—Ç–∞—Ç—É—Å': '–∑–¥–æ—Ä–æ–≤',
        '—Å–æ–æ–±—â–µ–Ω–∏–µ': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
    })

@app.route('/api/status')
def status():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return jsonify({
        '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
        '–≤–µ—Ä—Å–∏—è': '1.0.0',
        '—Å—Ç–∞—Ç—É—Å': '–∞–∫—Ç–∏–≤–Ω–æ'
    })

@app.route('/servers')
def servers():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    return render_template('servers.html', servers=servers_data)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω –º–æ–¥—É–ª—å
try:
    from admin import admin_bp
    app.register_blueprint(admin_bp)
    ADMIN_MODULE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∞–¥–º–∏–Ω –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")
    ADMIN_MODULE_AVAILABLE = False

@app.route('/api/servers')
def api_servers():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    return jsonify(servers_data)

@app.route('/admin/server/<int:server_id>/toggle', methods=['POST'])
def toggle_server_status(server_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if 'admin_logged_in' not in session:
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    for server in servers_data:
        if server['id'] == server_id:
            server['status'] = 'offline' if server['status'] == 'online' else 'online'
            server['last_check'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            return jsonify({'success': True, 'new_status': server['status']})
    
    return jsonify({'error': '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

@app.route('/system')
def system_status():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    if not SYSTEM_MONITOR_AVAILABLE:
        return render_template('system_unavailable.html')
    
    report = system_monitor.get_full_report()
    return render_template('system_status.html', report=report)

@app.route('/api/system')
def api_system():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"""
    if not SYSTEM_MONITOR_AVAILABLE:
        return jsonify({'error': 'System monitor unavailable'})
    
    return jsonify(system_monitor.get_full_report())

@app.route('/api/servers/update')
def api_servers_update():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    update_servers_list()
    update_server_metrics()
    return jsonify({
        'servers': servers_data,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    })

@app.route('/api/notifications')
def api_notifications():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return jsonify(notifications)

@app.route('/admin/notifications')
@admin_required
def admin_notifications():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    return render_template('admin_notifications.html', notifications=notifications)

@app.route('/admin/logs')
@admin_required
def admin_logs():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
    try:
        with open('monitoring.log', 'r', encoding='utf-8') as f:
            logs = f.readlines()[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
    except FileNotFoundError:
        logs = ['–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω']
    
    return render_template('admin_logs.html', logs=logs)

@app.route('/admin/settings')
@admin_required
def admin_settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings = {
        'check_interval': 30,
        'alert_threshold_cpu': 80,
        'alert_threshold_memory': 85,
        'alert_threshold_disk': 90,
        'email_notifications': True,
        'retention_days': 30
    }
    return render_template('admin_settings.html', settings=settings)

@app.route('/admin/server/add', methods=['GET', 'POST'])
@admin_required
def admin_add_server():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    if request.method == 'POST':
        new_server = {
            'id': max([s['id'] for s in servers_data]) + 1,
            'name': request.form.get('name'),
            'ip': request.form.get('ip'),
            'port': int(request.form.get('port', 80)),
            'status': 'online',
            'cpu': 0,
            'memory': 0,
            'disk': 0,
            'network_in': 0,
            'network_out': 0,
            'uptime': '0 –¥–Ω–µ–π 0 —á–∞—Å–æ–≤',
            'last_check': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'location': request.form.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'os': request.form.get('os', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'alerts': []
        }
        servers_data.append(new_server)
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: {new_server['name']} ({new_server['ip']})")
        flash(f'–°–µ—Ä–≤–µ—Ä {new_server["name"]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
        return redirect(url_for('admin'))
    
    return render_template('admin_add_server.html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({'–æ—à–∏–±–∫–∞': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'–æ—à–∏–±–∫–∞': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

if ADVANCED_MONITORING_AVAILABLE:
    @app.route('/api/realtime/metrics')
    def realtime_metrics():
        """Real-time metrics endpoint"""
        metrics = advanced_monitor.get_comprehensive_metrics()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
        alert_manager.check_metrics(metrics)
        
        return jsonify({
            'metrics': metrics,
            'alerts': [alert.to_dict() for alert in alert_manager.get_active_alerts()],
            'timestamp': datetime.now().isoformat()
        })
    
    @app.route('/api/metrics/history/<metric_type>')
    def metrics_history(metric_type):
        """–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫"""
        limit = request.args.get('limit', 100, type=int)
        history = advanced_monitor.get_metrics_history(metric_type, limit)
        return jsonify(history)
    
    @app.route('/api/metrics/trends/<metric_type>/<field>')
    def metrics_trends(metric_type, field):
        """–¢—Ä–µ–Ω–¥—ã –º–µ—Ç—Ä–∏–∫"""
        period = request.args.get('period', 60, type=int)
        trends = advanced_monitor.calculate_trends(metric_type, field, period)
        return jsonify(trends)
    
    @app.route('/advanced-dashboard')
    def advanced_dashboard():
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return render_template('advanced_dashboard.html')
    
    if ADVANCED_MONITORING_AVAILABLE and SOCKETIO_AVAILABLE:
        @socketio.on('connect')
        def handle_connect():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket"""
            print('Client connected')
            emit('status', {'msg': 'Connected to monitoring system'})
        
        @socketio.on('disconnect')
        def handle_disconnect():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket"""
            print('Client disconnected')
        
        @socketio.on('request_metrics')
        def handle_metrics_request():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ WebSocket"""
            metrics = advanced_monitor.get_comprehensive_metrics()
            emit('metrics_update', metrics)

    def broadcast_metrics(metrics):
        """Broadcast –º–µ—Ç—Ä–∏–∫ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        socketio.emit('metrics_update', metrics)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    advanced_monitor.add_callback(broadcast_metrics)

# –ó–∞–º–µ–Ω–∞ deprecated @app.before_first_request –Ω–∞ @app.before_request —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
@app.before_request
def before_first_request():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    if not hasattr(app, '_initialized'):
        app._initialized = True
        create_tables()

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if ADVANCED_MONITORING_AVAILABLE:
        with app.app_context():
            db.create_all()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            advanced_monitor.start_monitoring(interval=30)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä)
            # email_notifier = EmailNotifier(
            #     smtp_server="smtp.gmail.com",
            #     smtp_port=587,
            #     username="your-email@gmail.com",
            #     password="your-password",
            #     from_email="monitoring@yourcompany.com",
            #     to_emails=["admin@yourcompany.com"]
            # )
            # alert_manager.add_notifier(email_notifier)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    if ADVANCED_MONITORING_AVAILABLE and SOCKETIO_AVAILABLE:
        socketio.run(app, host='127.0.0.1', port=5000, debug=True)
    else:
        print("‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ WebSocket)")
        app.run(host='127.0.0.1', port=5000, debug=True)
