#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
"""
import subprocess
import sys
import os
import venv
import platform

def create_virtual_env():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    venv_path = "monitoring_venv"
    if not os.path.exists(venv_path):
        venv.create(venv_path, with_pip=True)
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    else:
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return venv_path

def install_dependencies(venv_path):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    if platform.system() == "Windows":
        pip_path = os.path.join(venv_path, "Scripts", "pip.exe")
    else:
        pip_path = os.path.join(venv_path, "bin", "pip")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    subprocess.run([pip_path, "install", "--upgrade", "pip"], check=True)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    subprocess.run([pip_path, "install", "-r", "requirements.txt"], check=True)
    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        'app/controllers',
        'app/models', 
        'app/services/monitoring',
        'app/services/alerts',
        'app/utils',
        'config',
        'logs',
        'templates',
        'static'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    
    print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")

def create_init_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤."""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤...")
    
    init_files = [
        'app/__init__.py',
        'app/controllers/__init__.py',
        'app/models/__init__.py',
        'app/services/__init__.py',
        'app/services/monitoring/__init__.py',
        'app/services/alerts/__init__.py',
        'app/utils/__init__.py'
    ]
    
    for init_file in init_files:
        if not os.path.exists(init_file):
            with open(init_file, 'w') as f:
                f.write('# -*- coding: utf-8 -*-\n')
    
    print("‚úÖ __init__.py —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    print("üöÄ –£–°–¢–ê–ù–û–í–ö–ê –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("=" * 50)
    
    try:
        venv_path = create_virtual_env()
        create_directories()
        create_init_files()
        install_dependencies(venv_path)
        
        print("\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        if platform.system() == "Windows":
            print(f"   {venv_path}\\Scripts\\activate")
        else:
            print(f"   source {venv_path}/bin/activate")
        print("   python run.py")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
