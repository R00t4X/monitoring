#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –ø–æ—ç—Ç–∞–ø–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""
import subprocess
import sys
import os
import venv
import platform

class FixedAutoSetup:
    def __init__(self):
        self.script_dir = os.path.dirname(os.path.abspath(__file__))
        self.venv_name = "monitoring_venv"
        self.venv_path = os.path.join(self.script_dir, self.venv_name)
        self.is_windows = platform.system() == "Windows"
        
        if self.is_windows:
            self.python_exe = os.path.join(self.venv_path, "Scripts", "python.exe")
            self.pip_exe = os.path.join(self.venv_path, "Scripts", "pip.exe")
        else:
            self.python_exe = os.path.join(self.venv_path, "bin", "python")
            self.pip_exe = os.path.join(self.venv_path, "bin", "pip")
    
    def print_step(self, message):
        print(f"üîß {message}")
    
    def print_success(self, message):
        print(f"‚úÖ {message}")
    
    def print_error(self, message):
        print(f"‚ùå {message}")
    
    def print_warning(self, message):
        print(f"‚ö†Ô∏è  {message}")
    
    def create_venv(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if os.path.exists(self.venv_path):
            self.print_success(f"–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.venv_name}")
            return True
        
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        try:
            venv.create(self.venv_path, with_pip=True)
            self.print_success("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            return True
        except Exception as e:
            self.print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {e}")
            return False
    
    def upgrade_pip(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"""
        self.print_step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
        try:
            subprocess.run([
                self.python_exe, "-m", "pip", "install", "--upgrade", "pip"
            ], check=True, capture_output=True, text=True)
            self.print_success("pip –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
        except subprocess.CalledProcessError as e:
            self.print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip: {e}")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    
    def install_minimal_requirements(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        basic_packages = [
            "Flask==2.3.3",
            "Werkzeug==2.3.7"
        ]
        
        for package in basic_packages:
            try:
                subprocess.run([
                    self.pip_exe, "install", package
                ], check=True, capture_output=True, text=True)
                self.print_success(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {package}")
            except subprocess.CalledProcessError as e:
                self.print_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")
                return False
        
        # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–∫–µ—Ç—ã
        system_packages = [
            "psutil==5.9.6",
            "py-cpuinfo==9.0.0"
        ]
        
        for package in system_packages:
            try:
                subprocess.run([
                    self.pip_exe, "install", package
                ], check=True, capture_output=True, text=True)
                self.print_success(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {package}")
            except subprocess.CalledProcessError as e:
                self.print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        
        return True
    
    def install_optional_requirements(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        optional_packages = [
            "Flask-SocketIO==5.3.6",
            "Flask-SQLAlchemy==3.1.1",
            "numpy==1.25.2"
        ]
        
        installed_count = 0
        for package in optional_packages:
            try:
                subprocess.run([
                    self.pip_exe, "install", package
                ], check=True, capture_output=True, text=True, timeout=120)
                self.print_success(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {package}")
                installed_count += 1
            except (subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
                self.print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}: {e}")
        
        self.print_success(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {installed_count} –∏–∑ {len(optional_packages)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤")
        return True
    
    def check_imports(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        test_script = '''
import sys
try:
    import flask
    print("‚úÖ Flask: OK")
except ImportError as e:
    print(f"‚ùå Flask: {e}")
    sys.exit(1)

try:
    import psutil
    print("‚úÖ psutil: OK")
except ImportError:
    print("‚ö†Ô∏è psutil: Not available")

try:
    import cpuinfo
    print("‚úÖ cpuinfo: OK")
except ImportError:
    print("‚ö†Ô∏è cpuinfo: Not available")

print("SUCCESS: Basic modules available")
'''
        
        try:
            result = subprocess.run([
                self.python_exe, "-c", test_script
            ], capture_output=True, text=True, check=True)
            
            print(result.stdout)
            if "SUCCESS" in result.stdout:
                self.print_success("–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
                return True
            else:
                self.print_error("–ù–µ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
                return False
                
        except subprocess.CalledProcessError as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")
            return False
    
    def create_startup_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞"""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞...")
        
        if self.is_windows:
            script_content = f'''@echo off
echo üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
echo ==============================
"{self.python_exe}" simple_app.py
pause
'''
            script_name = "start_monitoring.bat"
        else:
            script_content = f'''#!/bin/bash
echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
echo "=============================="
"{self.python_exe}" simple_app.py
'''
            script_name = "start_monitoring.sh"
        
        script_path = os.path.join(self.script_dir, script_name)
        with open(script_path, 'w') as f:
            f.write(script_content)
        
        if not self.is_windows:
            os.chmod(script_path, 0o755)
        
        self.print_success(f"–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞: {script_name}")
        return True
    
    def run_app(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.print_step("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ simple_app.py
        simple_app_path = os.path.join(self.script_dir, "simple_app.py")
        if not os.path.exists(simple_app_path):
            self.print_error("–§–∞–π–ª simple_app.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        print("\n" + "="*60)
        print("üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("="*60)
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://127.0.0.1:5000")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60)
        
        try:
            subprocess.run([self.python_exe, simple_app_path], cwd=self.script_dir)
            return True
        except KeyboardInterrupt:
            print("\nüõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def setup_and_run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞"""
        print("\n" + "="*60)
        print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ê–í–¢–û–ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("="*60)
        
        steps = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.create_venv),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip", self.upgrade_pip),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_minimal_requirements),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_optional_requirements),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π", self.check_imports),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞", self.create_startup_script),
        ]
        
        for step_name, step_func in steps:
            try:
                if not step_func():
                    self.print_error(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
                    return False
            except Exception as e:
                self.print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ '{step_name}': {e}")
                return False
        
        print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        choice = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–µ–π—á–∞—Å? (y/N): ").lower().strip()
        if choice in ['y', 'yes', '–¥–∞', '–¥']:
            return self.run_app()
        else:
            print("\nüìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∑–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            if self.is_windows:
                print("   start_monitoring.bat")
            else:
                print("   ./start_monitoring.sh")
            print("   –∏–ª–∏")
            print(f"   {self.python_exe} simple_app.py")
            return True

def main():
    setup = FixedAutoSetup()
    
    try:
        success = setup.setup_and_run()
        if not success:
            print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
