#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤.
"""
import os
import shutil
import glob

def remove_unused_files():
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    
    # –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    files_to_remove = [
        'admin.py',  # –°—Ç–∞—Ä—ã–π –∞–¥–º–∏–Ω —Ñ–∞–π–ª
        'advanced_monitor.py',  # –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä
        'alert_system.py',  # –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤
        'models.py',  # –°—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏
        'auto_setup.py',  # –°—Ç–∞—Ä—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        'setup_and_run.py',  # –î—É–±–ª–∏—Ä—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç
        'start.py',  # –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Å—Ç–∞—Ä—Ç–µ—Ä
        'run.py',  # –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ä–∞–Ω–Ω–µ—Ä (–∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–µ–π)
        'quick_start.py',  # –î—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        'check_sensitive.py',  # –£—Ç–∏–ª–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        'install.sh',  # –°—Ç–∞—Ä—ã–π bash —Å–∫—Ä–∏–ø—Ç
        'install.bat',  # –°—Ç–∞—Ä—ã–π batch —Å–∫—Ä–∏–ø—Ç
        'git_prepare.sh',  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —É—Ç–∏–ª–∏—Ç–∞
        'install_and_run.sh',  # –î—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    ]
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    dirs_to_remove = [
        'app/',  # –°–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ simple_app
        'config/',  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        'migrations/',  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏
        'tests/',  # –¢–µ—Å—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
        'scripts/',  # –î—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–Ω–µ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        'static/uploads/',  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        'templates/admin/',  # –ê–¥–º–∏–Ω–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ simple_app
        'templates/auth/',  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–∞
        'templates/errors/',  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤—Å—Ç—Ä–æ–µ–Ω–∞
    ]
    
    removed_files = []
    removed_dirs = []
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    for file_path in files_to_remove:
        if os.path.exists(file_path):
            os.remove(file_path)
            removed_files.append(file_path)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
    
    # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for dir_path in dirs_to_remove:
        if os.path.exists(dir_path):
            shutil.rmtree(dir_path)
            removed_dirs.append(dir_path)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    empty_dirs = ['templates', 'static']
    for dir_path in empty_dirs:
        if os.path.exists(dir_path) and not os.listdir(dir_path):
            os.rmdir(dir_path)
            removed_dirs.append(dir_path)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
    
    return removed_files, removed_dirs

def keep_essential_files():
    """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å."""
    essential_files = [
        'simple_app.py',  # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        'system_monitor.py',  # –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        'auto_setup_fixed.py',  # –†–∞–±–æ—á–∏–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        'run_simple.py',  # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫
        'requirements_minimal.txt',  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        'requirements_compatible.txt',  # –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        '.gitignore',  # –ò—Å–∫–ª—é—á–µ–Ω–∏—è Git
        '.env.example',  # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        'README.md',  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        'cleanup.py',  # –£—Ç–∏–ª–∏—Ç–∞ –æ—á–∏—Å—Ç–∫–∏
        'cleanup_project.py',  # –≠—Ç–æ—Ç —Ñ–∞–π–ª
    ]
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã
    create_minimal_templates()
    
    return essential_files

def create_minimal_templates():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
    os.makedirs('templates', exist_ok=True)
    
    # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    base_template = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}–°–∏—Å—Ç–µ–º–∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞{% endblock %}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; }
        .header { background: #007bff; color: white; padding: 20px; margin: -20px -20px 20px -20px; border-radius: 8px 8px 0 0; }
        .nav { margin: 20px 0; }
        .nav a { margin-right: 15px; padding: 8px 16px; background: #007bff; color: white; text-decoration: none; border-radius: 4px; }
        .nav a:hover { background: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{% block header %}üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞{% endblock %}</h1>
        </div>
        <div class="nav">
            <a href="/">–ì–ª–∞–≤–Ω–∞—è</a>
            <a href="/servers">–°–µ—Ä–≤–µ—Ä—ã</a>
            <a href="/system">–°–∏—Å—Ç–µ–º–∞</a>
            <a href="/admin">–ê–¥–º–∏–Ω–∫–∞</a>
        </div>
        <main>
            {% block content %}{% endblock %}
        </main>
    </div>
</body>
</html>'''
    
    with open('templates/base.html', 'w', encoding='utf-8') as f:
        f.write(base_template)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏."""
    print("üßπ –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê –û–¢ –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–• –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
    print("\nüìã –§–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    
    choice = input("\n‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (y/N): ").lower().strip()
    if choice not in ['y', 'yes', '–¥–∞', '–¥']:
        print("üõë –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    removed_files, removed_dirs = remove_unused_files()
    essential_files = keep_essential_files()
    
    print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÑ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(removed_files)}")
    print(f"üìÅ –£–¥–∞–ª–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(removed_dirs)}")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(essential_files)}")
    
    print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
    for file in essential_files:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")

if __name__ == "__main__":
    main()
