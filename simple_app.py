#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""
from flask import Flask, render_template, jsonify, request, redirect, url_for, session, flash
import os
import random
import socket
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('monitoring.log'),
        logging.StreamHandler()
    ]
)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç system_monitor
try:
    from system_monitor import SystemMonitor
    system_monitor = SystemMonitor()
    SYSTEM_MONITOR_AVAILABLE = True
    logging.info("System monitor –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    logging.warning(f"System monitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    SYSTEM_MONITOR_AVAILABLE = False
    system_monitor = None

# –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
servers_data = [
    {
        'id': 1,
        'name': 'Web-—Å–µ—Ä–≤–µ—Ä 1',
        'ip': '192.168.1.10',
        'port': 80,
        'status': 'online',
        'cpu': 45,
        'memory': 67,
        'disk': 32,
        'network_in': 1250,
        'network_out': 890,
        'uptime': '15 –¥–Ω–µ–π 8 —á–∞—Å–æ–≤',
        'last_check': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'location': '–ú–æ—Å–∫–≤–∞, –†–§',
        'os': 'Ubuntu 22.04',
        'alerts': []
    }
]

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ADMIN_CREDENTIALS = {
    'username': os.environ.get('ADMIN_USERNAME', 'admin'),
    'password': os.environ.get('ADMIN_PASSWORD', 'admin123')
}

def get_local_server_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ"""
    if not SYSTEM_MONITOR_AVAILABLE:
        return {
            'id': 0,
            'name': '–õ–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ (–±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)',
            'ip': '127.0.0.1',
            'port': 5000,
            'status': 'online',
            'cpu': random.randint(10, 50),
            'memory': random.randint(30, 70),
            'disk': random.randint(20, 60),
            'network_in': random.randint(100, 1000),
            'network_out': random.randint(50, 500),
            'uptime': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'last_check': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'location': '–õ–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞',
            'os': '–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
            'alerts': []
        }
    
    try:
        metrics = system_monitor.get_all_metrics()
        system_info = metrics.get('system_info', {})
        cpu_data = metrics.get('cpu', {})
        memory_data = metrics.get('memory', {})
        disk_data = metrics.get('disk', {})
        network_data = metrics.get('network', {})
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–∫
        main_disk_percent = 0
        if disk_data.get('partitions'):
            main_disk_percent = disk_data['partitions'][0].get('percent', 0)
        
        return {
            'id': 0,
            'name': f'–õ–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ ({system_info.get("hostname", "Unknown")})',
            'ip': socket.gethostbyname(socket.gethostname()),
            'port': 5000,
            'status': 'online',
            'cpu': cpu_data.get('cpu_percent', 0),
            'memory': memory_data.get('percent', 0),
            'disk': main_disk_percent,
            'network_in': network_data.get('speed', {}).get('bytes_recv_per_sec', 0),
            'network_out': network_data.get('speed', {}).get('bytes_sent_per_sec', 0),
            'uptime': system_info.get('uptime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'last_check': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'location': '–õ–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞',
            'os': f"{system_info.get('platform', 'Unknown')}",
            'alerts': []
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: {e}")
        return None

def update_servers_list():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–æ–π"""
    global servers_data
    local_server = get_local_server_data()
    if local_server:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        servers_data = [s for s in servers_data if s['id'] != 0]
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ
        servers_data.insert(0, local_server)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    update_servers_list()
    return render_template('index.html')

@app.route('/api/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'message': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'system_monitor': SYSTEM_MONITOR_AVAILABLE
    })

@app.route('/api/status')
def status():
    """Status endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return jsonify({
        'application': 'monitoring',
        'version': '1.0.0',
        'status': 'active',
        'features': {
            'system_monitor': SYSTEM_MONITOR_AVAILABLE,
            'servers_count': len(servers_data)
        }
    })

@app.route('/servers')
def servers():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    update_servers_list()
    return render_template('servers.html', servers=servers_data)

@app.route('/system')
def system_status():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    if not SYSTEM_MONITOR_AVAILABLE:
        return render_template('system_unavailable.html')
    
    try:
        report = system_monitor.get_all_metrics()
        return render_template('system_status.html', report=report)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
        return render_template('system_unavailable.html', error=str(e))

@app.route('/api/system')
def api_system():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"""
    if not SYSTEM_MONITOR_AVAILABLE:
        return jsonify({'error': 'System monitor unavailable'})
    
    try:
        return jsonify(system_monitor.get_all_metrics())
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/servers/update')
def api_servers_update():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    update_servers_list()
    return jsonify({
        'servers': servers_data,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    })

@app.route('/admin')
def admin():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
    if 'admin_logged_in' in session:
        return render_template('admin_dashboard.html', servers=servers_data)
    return render_template('admin_login.html')

@app.route('/admin/login', methods=['POST'])
def admin_login():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
    username = request.form.get('username')
    password = request.form.get('password')
    
    if username == ADMIN_CREDENTIALS['username'] and password == ADMIN_CREDENTIALS['password']:
        session['admin_logged_in'] = True
        flash('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É!', 'success')
        logging.info(f"Admin login: {username}")
        return redirect(url_for('admin'))
    else:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!', 'error')
        logging.warning(f"Failed admin login attempt: {username}")
        return redirect(url_for('admin'))

@app.route('/admin/logout')
def admin_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    session.pop('admin_logged_in', None)
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info')
    return redirect(url_for('index'))

# –ó–∞–º–µ–Ω–∞ deprecated @app.before_first_request –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
app_initialized = False

@app.before_request
def initialize_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    global app_initialized
    if not app_initialized:
        app_initialized = True
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–æ–π
        update_servers_list()
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

if __name__ == '__main__':
    logging.info("–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
    host = os.environ.get("HOST", "127.0.0.1")
    port = int(os.environ.get("PORT", 5000))
    debug = os.environ.get("FLASK_DEBUG", "False").lower() == "true"
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ {host}:{port}")
    print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://{host}:{port}")
    
    app.run(host=host, port=port, debug=debug)
