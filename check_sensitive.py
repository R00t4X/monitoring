#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
"""

import os
import re
import glob

class SensitiveDataChecker:
    def __init__(self):
        self.script_dir = os.path.dirname(os.path.abspath(__file__))
        self.issues = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.sensitive_patterns = {
            'passwords': [
                r'password\s*[=:]\s*["\']?[^"\'\s]{8,}',
                r'passwd\s*[=:]\s*["\']?[^"\'\s]{8,}',
                r'pwd\s*[=:]\s*["\']?[^"\'\s]{8,}'
            ],
            'api_keys': [
                r'api[_-]?key\s*[=:]\s*["\']?[a-zA-Z0-9]{20,}',
                r'secret[_-]?key\s*[=:]\s*["\']?[a-zA-Z0-9]{20,}',
                r'token\s*[=:]\s*["\']?[a-zA-Z0-9]{20,}'
            ],
            'database_urls': [
                r'mysql://[^"\'\s]+',
                r'postgresql://[^"\'\s]+',
                r'mongodb://[^"\'\s]+'
            ],
            'ip_addresses': [
                r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
            ]
        }
        
        # –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ Git
        self.forbidden_files = [
            '*.log', '*.db', '*.sqlite', '*.sqlite3',
            '.env', '.env.local', '.env.production',
            'config.ini', 'secrets.json', 'credentials.json',
            '*.key', '*.pem', '*.p12'
        ]
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ Git
        self.forbidden_dirs = [
            '__pycache__', '.vscode', '.idea', 
            'monitoring_venv', 'venv', 'env',
            'logs', 'backups', 'cache'
        ]
    
    def check_forbidden_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        for pattern in self.forbidden_files:
            files = glob.glob(os.path.join(self.script_dir, "**/" + pattern), recursive=True)
            for file_path in files:
                rel_path = os.path.relpath(file_path, self.script_dir)
                self.issues.append(f"‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {rel_path}")
    
    def check_forbidden_dirs(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        
        for root, dirs, files in os.walk(self.script_dir):
            for dir_name in dirs:
                if dir_name in self.forbidden_dirs:
                    dir_path = os.path.join(root, dir_name)
                    rel_path = os.path.relpath(dir_path, self.script_dir)
                    self.issues.append(f"‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {rel_path}")
    
    def check_file_contents(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ Python —Ñ–∞–π–ª—ã –∏ –∫–æ–Ω—Ñ–∏–≥–∏
        file_patterns = ['*.py', '*.json', '*.ini', '*.cfg', '*.conf', '*.yml', '*.yaml']
        
        for pattern in file_patterns:
            files = glob.glob(os.path.join(self.script_dir, "**/" + pattern), recursive=True)
            
            for file_path in files:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                if any(excluded in file_path for excluded in ['/venv/', '/__pycache__/', '/.git/']):
                    continue
                
                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                        self._check_content_patterns(file_path, content)
                except Exception as e:
                    continue
    
    def _check_content_patterns(self, file_path, content):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        rel_path = os.path.relpath(file_path, self.script_dir)
        
        for category, patterns in self.sensitive_patterns.items():
            for pattern in patterns:
                matches = re.findall(pattern, content, re.IGNORECASE)
                if matches:
                    for match in matches:
                        self.issues.append(f"‚ö†Ô∏è  {category.upper()} –≤ {rel_path}: {match[:50]}...")
    
    def check_gitignore(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ .gitignore"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...")
        
        gitignore_path = os.path.join(self.script_dir, '.gitignore')
        
        if not os.path.exists(gitignore_path):
            self.issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .gitignore")
            return
        
        try:
            with open(gitignore_path, 'r', encoding='utf-8') as f:
                gitignore_content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            required_patterns = [
                '__pycache__', '*.log', '.env', 'venv', '*.db'
            ]
            
            for pattern in required_patterns:
                if pattern not in gitignore_content:
                    self.issues.append(f"‚ö†Ô∏è  .gitignore: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω '{pattern}'")
                    
        except Exception as e:
            self.issues.append(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .gitignore: {e}")
    
    def run_check(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üîí –ü–†–û–í–ï–†–ö–ê –ù–ê –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï")
        print("="*40)
        
        self.check_gitignore()
        self.check_forbidden_files()
        self.check_forbidden_dirs()
        self.check_file_contents()
        
        print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
        print("="*40)
        
        if not self.issues:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            return True
        else:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(self.issues)}")
            for issue in self.issues:
                print(f"   {issue}")
            
            print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ cleanup.py –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ .gitignore")
            print("3. –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å–µ–∫—Ä–µ—Ç–æ–≤")
            
            return False

def main():
    checker = SensitiveDataChecker()
    is_clean = checker.run_check()
    
    if not is_clean:
        exit(1)

if __name__ == "__main__":
    main()
