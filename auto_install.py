#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
import subprocess
import sys
import os
import venv
import platform
import importlib

class AutoInstaller:
    def __init__(self):
        self.script_dir = os.path.dirname(os.path.abspath(__file__))
        self.venv_name = "monitoring_venv"
        self.venv_path = os.path.join(self.script_dir, self.venv_name)
        self.is_windows = platform.system() == "Windows"
        
        if self.is_windows:
            self.python_exe = os.path.join(self.venv_path, "Scripts", "python.exe")
            self.pip_exe = os.path.join(self.venv_path, "Scripts", "pip.exe")
        else:
            self.python_exe = os.path.join(self.venv_path, "bin", "python")
            self.pip_exe = os.path.join(self.venv_path, "bin", "pip")
    
    def print_status(self, message, status="INFO"):
        icons = {"INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "ERROR": "‚ùå", "WARNING": "‚ö†Ô∏è"}
        print(f"{icons.get(status, '‚ÑπÔ∏è')} {message}")
    
    def check_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        self.print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
        version = sys.version_info
        
        if version.major < 3 or (version.major == 3 and version.minor < 7):
            self.print_status(f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7+, –Ω–∞–π–¥–µ–Ω {version.major}.{version.minor}", "ERROR")
            return False
        
        self.print_status(f"Python {version.major}.{version.minor}.{version.micro} - OK", "SUCCESS")
        return True
    
    def create_venv(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if os.path.exists(self.venv_path):
            self.print_status("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "SUCCESS")
            return True
        
        self.print_status("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        try:
            venv.create(self.venv_path, with_pip=True)
            self.print_status("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", "SUCCESS")
            return True
        except Exception as e:
            self.print_status(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}", "ERROR")
            return False
    
    def upgrade_pip(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"""
        self.print_status("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
        try:
            subprocess.run([
                self.python_exe, "-m", "pip", "install", "--upgrade", "pip"
            ], check=True, capture_output=True, text=True, timeout=120)
            self.print_status("pip –æ–±–Ω–æ–≤–ª–µ–Ω", "SUCCESS")
            return True
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
            self.print_status(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip: {e}", "WARNING")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è pip
    
    def install_package(self, package_name, version=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
        package_spec = f"{package_name}=={version}" if version else package_name
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–∞–∫–µ—Ç
            result = subprocess.run([
                self.python_exe, "-c", f"import {package_name}"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                self.print_status(f"{package_name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "SUCCESS")
                return True
        except:
            pass
        
        self.print_status(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package_spec}...")
        try:
            subprocess.run([
                self.pip_exe, "install", package_spec, "--timeout", "120"
            ], check=True, capture_output=True, text=True, timeout=180)
            self.print_status(f"{package_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "SUCCESS")
            return True
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
            self.print_status(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package_name}: {e}", "ERROR")
            return False
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.print_status("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        packages = [
            ("flask", "2.3.3"),
            ("werkzeug", "2.3.7"),
            ("psutil", "5.9.6"),
            ("py-cpuinfo", "9.0.0")
        ]
        
        success_count = 0
        for package_name, version in packages:
            if self.install_package(package_name, version):
                success_count += 1
        
        if success_count >= 2:  # –ú–∏–Ω–∏–º—É–º Flask –∏ –æ–¥–∏–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–∫–µ—Ç–æ–≤
            self.print_status(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {success_count}/{len(packages)} –ø–∞–∫–µ—Ç–æ–≤", "SUCCESS")
            return True
        else:
            self.print_status("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã", "ERROR")
            return False
    
    def verify_installation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")
        
        test_script = '''
import sys
modules_status = {}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Flask (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
try:
    import flask
    modules_status["flask"] = "OK"
except ImportError as e:
    modules_status["flask"] = f"ERROR: {e}"
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º psutil (–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π)
try:
    import psutil
    modules_status["psutil"] = "OK"
except ImportError:
    modules_status["psutil"] = "NOT_AVAILABLE"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º cpuinfo (–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π)
try:
    import cpuinfo
    modules_status["cpuinfo"] = "OK"
except ImportError:
    modules_status["cpuinfo"] = "NOT_AVAILABLE"

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
for module, status in modules_status.items():
    print(f"{module}: {status}")

print("VERIFICATION_SUCCESS")
'''
        
        try:
            result = subprocess.run([
                self.python_exe, "-c", test_script
            ], capture_output=True, text=True, check=True, timeout=30)
            
            print(result.stdout)
            if "VERIFICATION_SUCCESS" in result.stdout:
                self.print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "SUCCESS")
                return True
            else:
                self.print_status("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π", "ERROR")
                return False
                
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
            self.print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", "ERROR")
            return False
    
    def create_requirements_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ requirements.txt"""
        requirements_content = """# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
Flask==2.3.3
Werkzeug==2.3.7
psutil==5.9.6
py-cpuinfo==9.0.0
"""
        
        try:
            with open(os.path.join(self.script_dir, "requirements.txt"), "w", encoding="utf-8") as f:
                f.write(requirements_content)
            self.print_status("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª requirements.txt", "SUCCESS")
            return True
        except Exception as e:
            self.print_status(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è requirements.txt: {e}", "WARNING")
            return False
    
    def create_run_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞"""
        if self.is_windows:
            script_content = f'''@echo off
echo üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
echo =============================
"{self.python_exe}" simple_app.py
pause
'''
            script_name = "run_monitoring.bat"
        else:
            script_content = f'''#!/bin/bash
echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
echo "============================="
"{self.python_exe}" simple_app.py
'''
            script_name = "run_monitoring.sh"
        
        script_path = os.path.join(self.script_dir, script_name)
        try:
            with open(script_path, 'w', encoding='utf-8') as f:
                f.write(script_content)
            
            if not self.is_windows:
                os.chmod(script_path, 0o755)
            
            self.print_status(f"–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞: {script_name}", "SUCCESS")
            return True
        except Exception as e:
            self.print_status(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}", "WARNING")
            return False
    
    def create_helper_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        success = True
        
        # –°–æ–∑–¥–∞–µ–º requirements.txt
        if not self.create_requirements_file():
            success = False
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
        if not self.create_run_script():
            success = False
            
        return success

    def run_application(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        simple_app_path = os.path.join(self.script_dir, "simple_app.py")
        
        if not os.path.exists(simple_app_path):
            self.print_status("–§–∞–π–ª simple_app.py –Ω–µ –Ω–∞–π–¥–µ–Ω!", "ERROR")
            return False
        
        self.print_status("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        print("\n" + "="*60)
        print("üöÄ –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ó–ê–ü–£–©–ï–ù–ê")
        print("="*60)
        print("üåê URL: http://127.0.0.1:5000")
        print("üë§ –ê–¥–º–∏–Ω–∫–∞: http://127.0.0.1:5000/admin (admin/admin123)")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60)
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env['VIRTUAL_ENV'] = self.venv_path
            
            subprocess.run([self.python_exe, simple_app_path], 
                         cwd=self.script_dir, env=env)
            return True
        except KeyboardInterrupt:
            print("\nüõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return True
        except Exception as e:
            self.print_status(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", "ERROR")
            return False
    
    def full_install_and_run(self):
        """–ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫"""
        print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("=" * 55)
        
        steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Python", self.check_python_version),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.create_venv),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip", self.upgrade_pip),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_dependencies),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", self.verify_installation),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", self.create_helper_files),
        ]
        
        for step_name, step_func in steps:
            print(f"\nüìã {step_name}...")
            try:
                if not step_func():
                    self.print_status(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}", "ERROR")
                    return False
            except Exception as e:
                self.print_status(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç—Ç–∞–ø–µ '{step_name}': {e}", "ERROR")
                return False
        
        print("\n" + "="*55)
        self.print_status("–£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!", "SUCCESS")
        print("="*55)
        
        choice = input("\nüéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–µ–π—á–∞—Å? (y/N): ").lower().strip()
        if choice in ['y', 'yes', '–¥–∞', '–¥']:
            return self.run_application()
        else:
            print(f"\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∑–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            if self.is_windows:
                print(f"   run_monitoring.bat")
            else:
                print(f"   ./run_monitoring.sh")
            print(f"   –∏–ª–∏: {self.python_exe} simple_app.py")
            return True

def main():
    installer = AutoInstaller()
    
    try:
        success = installer.full_install_and_run()
        if not success:
            print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1)

if __name__ == "__main__":
    main()
